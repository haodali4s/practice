{"ast":null,"code":"//detail模块的小仓库\n// import { reqDetailList, reqAddOrUpdateCart } from '@/api';\nimport { reqDetailList } from '@/api';\nlet state = {\n  //商品详情的数据\n  detailInfo: {}\n};\nlet mutations = {\n  GETDETAILINFO(state, detailInfo) {\n    state.detailInfo = detailInfo;\n  }\n};\nlet actions = {\n  async getDetailInfo({\n    state,\n    commit,\n    dispatch\n  }, skuId) {\n    //商品详情请求，需要携带商品ID\n    let result = await reqDetailList(skuId);\n    console.log(result);\n    if (result.code == 200) {\n      commit('GETDETAILINFO', result.data);\n    }\n  },\n  //加入购物车|将来修改商品个数的地方,右侧是载荷对象【两个K,两个V】\n  async addOrUpdateCart({\n    state,\n    commit,\n    dispatch\n  }, {\n    skuId,\n    skuNum\n  }) {\n    //底下即为：加入购物车(修改商品个数)的请求,参数顺序不能瞎写\n    let result = await reqAddOrUpdateCart(skuId, skuNum);\n    console.log(result);\n    if (result.code == 200) {\n      //如果加入购物车成功,返回promise即为成功\n      return \"ok\";\n    } else {\n      //如果加入购物车失败，返回失败的Promise\n      return Promise.reject();\n    }\n    //思考问题:目的是前端把商品的ID、商品个数传递给服务器【人家服务器，兄弟我收到了,没有额外的给你传递其余的数据】\n    //想的问题:豪哥不对，咱们以前经常commit条件mutation存储数据【没有返回数据，没有数据可存储】,没有需要提交mutation让仓库\n    //存储数据\n    //第一种解决方案code,完全可以！！！！\n  }\n};\n//项目中仓库的getters为了简化数据而生【组件获取数据更加方便】\nlet getters = {\n  //面包屑的数据\n  categoryView(state) {\n    //研究这个问题:\n    //起始状态:state.detailInfo起始状态空对象,空对象.categoryView->undefined\n    //当服务器数据回来之后state.detailInfo,并非空对象,获取的即为服务器返回的数据{7个K}\n    //当前属性值:服务器的数据有值，用服务器的。服务器数据没有回来至少有一个空对象兜底【不能undefined兜底】\n    return state.detailInfo.categoryView || {};\n  },\n  //商品信息的数据\n  skuInfo() {\n    return state.detailInfo.skuInfo || {};\n  },\n  //商品销售属性列表的数据\n  spuSaleAttrList() {\n    return state.detailInfo.spuSaleAttrList || [];\n  }\n};\n\n//对外暴露\nexport default {\n  state,\n  mutations,\n  actions,\n  getters\n};","map":{"version":3,"names":["reqDetailList","state","detailInfo","mutations","GETDETAILINFO","actions","getDetailInfo","commit","dispatch","skuId","result","console","log","code","data","addOrUpdateCart","skuNum","reqAddOrUpdateCart","Promise","reject","getters","categoryView","skuInfo","spuSaleAttrList"],"sources":["E:/360MoveData/Users/Admin/Desktop/qian/cil/shangpinhui/src/store/detail/index.js"],"sourcesContent":["//detail模块的小仓库\r\n// import { reqDetailList, reqAddOrUpdateCart } from '@/api';\r\nimport { reqDetailList } from '@/api';\r\nlet state = {\r\n     //商品详情的数据\r\n     detailInfo: {}\r\n};\r\nlet mutations = {\r\n     GETDETAILINFO(state, detailInfo) {\r\n          state.detailInfo = detailInfo;\r\n     }\r\n};\r\nlet actions = {\r\n\r\n     async getDetailInfo({ state, commit, dispatch }, skuId) {\r\n          //商品详情请求，需要携带商品ID\r\n          let result = await reqDetailList(skuId);\r\n          console.log(result)\r\n          if (result.code == 200) {\r\n               commit('GETDETAILINFO', result.data);\r\n          }\r\n     },\r\n     //加入购物车|将来修改商品个数的地方,右侧是载荷对象【两个K,两个V】\r\n     async addOrUpdateCart({ state, commit, dispatch }, { skuId, skuNum }) {\r\n          //底下即为：加入购物车(修改商品个数)的请求,参数顺序不能瞎写\r\n          let result = await reqAddOrUpdateCart(skuId, skuNum);\r\n          console.log(result)\r\n          if (result.code == 200) {\r\n               //如果加入购物车成功,返回promise即为成功\r\n               return \"ok\";\r\n          } else {\r\n               //如果加入购物车失败，返回失败的Promise\r\n               return Promise.reject();\r\n          }\r\n          //思考问题:目的是前端把商品的ID、商品个数传递给服务器【人家服务器，兄弟我收到了,没有额外的给你传递其余的数据】\r\n          //想的问题:豪哥不对，咱们以前经常commit条件mutation存储数据【没有返回数据，没有数据可存储】,没有需要提交mutation让仓库\r\n          //存储数据\r\n          //第一种解决方案code,完全可以！！！！\r\n\r\n\r\n     }\r\n};\r\n//项目中仓库的getters为了简化数据而生【组件获取数据更加方便】\r\nlet getters = {\r\n     //面包屑的数据\r\n     categoryView(state) {\r\n          //研究这个问题:\r\n          //起始状态:state.detailInfo起始状态空对象,空对象.categoryView->undefined\r\n          //当服务器数据回来之后state.detailInfo,并非空对象,获取的即为服务器返回的数据{7个K}\r\n          //当前属性值:服务器的数据有值，用服务器的。服务器数据没有回来至少有一个空对象兜底【不能undefined兜底】\r\n          return state.detailInfo.categoryView || {}\r\n     },\r\n     //商品信息的数据\r\n     skuInfo() {\r\n          return state.detailInfo.skuInfo || {}\r\n     },\r\n     //商品销售属性列表的数据\r\n     spuSaleAttrList() {\r\n          return state.detailInfo.spuSaleAttrList || []\r\n     }\r\n};\r\n\r\n//对外暴露\r\nexport default {\r\n     state,\r\n     mutations,\r\n     actions,\r\n     getters\r\n}"],"mappings":"AAAA;AACA;AACA,SAASA,aAAa,QAAQ,OAAO;AACrC,IAAIC,KAAK,GAAG;EACP;EACAC,UAAU,EAAE,CAAC;AAClB,CAAC;AACD,IAAIC,SAAS,GAAG;EACXC,aAAaA,CAACH,KAAK,EAAEC,UAAU,EAAE;IAC5BD,KAAK,CAACC,UAAU,GAAGA,UAAU;EAClC;AACL,CAAC;AACD,IAAIG,OAAO,GAAG;EAET,MAAMC,aAAaA,CAAC;IAAEL,KAAK;IAAEM,MAAM;IAAEC;EAAS,CAAC,EAAEC,KAAK,EAAE;IACnD;IACA,IAAIC,MAAM,GAAG,MAAMV,aAAa,CAACS,KAAK,CAAC;IACvCE,OAAO,CAACC,GAAG,CAACF,MAAM,CAAC;IACnB,IAAIA,MAAM,CAACG,IAAI,IAAI,GAAG,EAAE;MACnBN,MAAM,CAAC,eAAe,EAAEG,MAAM,CAACI,IAAI,CAAC;IACzC;EACL,CAAC;EACD;EACA,MAAMC,eAAeA,CAAC;IAAEd,KAAK;IAAEM,MAAM;IAAEC;EAAS,CAAC,EAAE;IAAEC,KAAK;IAAEO;EAAO,CAAC,EAAE;IACjE;IACA,IAAIN,MAAM,GAAG,MAAMO,kBAAkB,CAACR,KAAK,EAAEO,MAAM,CAAC;IACpDL,OAAO,CAACC,GAAG,CAACF,MAAM,CAAC;IACnB,IAAIA,MAAM,CAACG,IAAI,IAAI,GAAG,EAAE;MACnB;MACA,OAAO,IAAI;IAChB,CAAC,MAAM;MACF;MACA,OAAOK,OAAO,CAACC,MAAM,EAAE;IAC5B;IACA;IACA;IACA;IACA;EAGL;AACL,CAAC;AACD;AACA,IAAIC,OAAO,GAAG;EACT;EACAC,YAAYA,CAACpB,KAAK,EAAE;IACf;IACA;IACA;IACA;IACA,OAAOA,KAAK,CAACC,UAAU,CAACmB,YAAY,IAAI,CAAC,CAAC;EAC/C,CAAC;EACD;EACAC,OAAOA,CAAA,EAAG;IACL,OAAOrB,KAAK,CAACC,UAAU,CAACoB,OAAO,IAAI,CAAC,CAAC;EAC1C,CAAC;EACD;EACAC,eAAeA,CAAA,EAAG;IACb,OAAOtB,KAAK,CAACC,UAAU,CAACqB,eAAe,IAAI,EAAE;EAClD;AACL,CAAC;;AAED;AACA,eAAe;EACVtB,KAAK;EACLE,SAAS;EACTE,OAAO;EACPe;AACL,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}