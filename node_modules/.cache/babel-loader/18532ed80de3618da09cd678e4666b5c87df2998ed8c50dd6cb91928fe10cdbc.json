{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n//购物车小仓库\nimport { reqShopCart, reqDeleteCart, reqUpdateChecked } from '@/api';\n//规范:利用vuex存储数据\n// import { SET_USERID } from '@/utils/USER_ID';\nlet state = {\n  //vuex仓库存储用户临时身份,vuex存储数据确实非持久化的，SET_USERID执行返回结果,可是本地存储获取的！！\n  USER_ID: SET_USERID(),\n  shopCartInfo: []\n};\nlet mutations = {\n  GETSHOPCART(state, payload) {\n    state.shopCartInfo = payload;\n  }\n};\nlet actions = {\n  //获取用户购物车的数据\n  async getShopCart({\n    commit,\n    state,\n    dispatch\n  }) {\n    let result = await reqShopCart();\n    if (result.code == 200) {\n      commit('GETSHOPCART', result.data);\n    }\n  },\n  //删除某一个商品的数据\n  async deleteCartById({\n    commit,\n    state,\n    dispatch\n  }, skuId) {\n    let result = await reqDeleteCart(skuId);\n    if (result.code == 200) {\n      return 'ok';\n    } else {\n      return Promise.reject();\n    }\n  },\n  //修改某一个商品勾选状态\n  async changeChecked({\n    commit,\n    state,\n    dispatch\n  }, {\n    skuId,\n    isChecked\n  }) {\n    let result = await reqUpdateChecked(skuId, isChecked);\n    if (result.code == 200) {\n      return 'ok';\n    } else {\n      return Promise.reject();\n    }\n  },\n  //修改全部商品的勾选的状态\n  allUpdateChecked({\n    commit,\n    state,\n    dispatch\n  }, isChecked) {\n    let arr = [];\n    //获取购物车商品的个数,进行遍历\n    state.shopCartInfo[0].cartInfoList.forEach(item => {\n      //调用修改某一个商品的action【四次】\n      let ps = dispatch(\"changeChecked\", {\n        skuId: item.skuId,\n        isChecked\n      });\n      arr.push(ps);\n    });\n    //Promise.all():参数需要的是一个数组【数组里面需要promise】\n    //Promise.all()执行一次,返回的是一个Promise对象,Promise对象状态：成功、失败取决于什么?\n    //成功、还是失败取决于数组里面的promise状态:四个都成功、返回成功Promise、只要有一个失败、返回Promise失败状态！！！\n    return Promise.all(arr);\n  },\n  //删除选中的商品\n  deleteAllCart({\n    commit,\n    state,\n    dispatch\n  }) {\n    let arr = [];\n    //获取仓库里面购物车的数据\n    state.shopCartInfo[0].cartInfoList.forEach(item => {\n      //商品的勾选状态是勾选的,发请求一个一个删除\n      if (item.isChecked == 1) {\n        let ps = dispatch('deleteCartById', item.skuId);\n        arr.push(ps);\n      }\n    });\n    return Promise.all(arr);\n  }\n};\nlet getters = {\n  //计算数组里面第一个元素：对象\n  CartInfo(state) {\n    return state.shopCartInfo[0] || {};\n  }\n};\n\n//对外暴露\nexport default {\n  state,\n  mutations,\n  actions,\n  getters\n};","map":{"version":3,"names":["reqShopCart","reqDeleteCart","reqUpdateChecked","state","USER_ID","SET_USERID","shopCartInfo","mutations","GETSHOPCART","payload","actions","getShopCart","commit","dispatch","result","code","data","deleteCartById","skuId","Promise","reject","changeChecked","isChecked","allUpdateChecked","arr","cartInfoList","forEach","item","ps","push","all","deleteAllCart","getters","CartInfo"],"sources":["E:/360MoveData/Users/Admin/Desktop/qian/cil/shangpinhui/src/store/shopcart/index.js"],"sourcesContent":["//购物车小仓库\r\nimport { reqShopCart, reqDeleteCart, reqUpdateChecked } from '@/api'\r\n//规范:利用vuex存储数据\r\n// import { SET_USERID } from '@/utils/USER_ID';\r\nlet state = {\r\n     //vuex仓库存储用户临时身份,vuex存储数据确实非持久化的，SET_USERID执行返回结果,可是本地存储获取的！！\r\n     USER_ID: SET_USERID(),\r\n     shopCartInfo: []\r\n};\r\nlet mutations = {\r\n     GETSHOPCART(state, payload) {\r\n          state.shopCartInfo = payload;\r\n     }\r\n};\r\nlet actions = {\r\n     //获取用户购物车的数据\r\n     async getShopCart({ commit, state, dispatch }) {\r\n          let result = await reqShopCart();\r\n          if (result.code == 200) {\r\n               commit('GETSHOPCART', result.data);\r\n          }\r\n     },\r\n     //删除某一个商品的数据\r\n     async deleteCartById({ commit, state, dispatch }, skuId) {\r\n          let result = await reqDeleteCart(skuId);\r\n          if (result.code == 200) {\r\n               return 'ok';\r\n          } else {\r\n               return Promise.reject();\r\n          }\r\n     },\r\n     //修改某一个商品勾选状态\r\n     async changeChecked({ commit, state, dispatch }, { skuId, isChecked }) {\r\n          let result = await reqUpdateChecked(skuId, isChecked);\r\n          if (result.code == 200) {\r\n               return 'ok';\r\n          } else {\r\n               return Promise.reject();\r\n          }\r\n\r\n     },\r\n     //修改全部商品的勾选的状态\r\n     allUpdateChecked({ commit, state, dispatch }, isChecked) {\r\n          let arr = [];\r\n          //获取购物车商品的个数,进行遍历\r\n          state.shopCartInfo[0].cartInfoList.forEach(item => {\r\n               //调用修改某一个商品的action【四次】\r\n               let ps = dispatch(\"changeChecked\", { skuId: item.skuId, isChecked });\r\n               arr.push(ps);\r\n          })\r\n          //Promise.all():参数需要的是一个数组【数组里面需要promise】\r\n          //Promise.all()执行一次,返回的是一个Promise对象,Promise对象状态：成功、失败取决于什么?\r\n          //成功、还是失败取决于数组里面的promise状态:四个都成功、返回成功Promise、只要有一个失败、返回Promise失败状态！！！\r\n          return Promise.all(arr);\r\n     },\r\n     //删除选中的商品\r\n     deleteAllCart({ commit, state, dispatch }) {\r\n          let arr = [];\r\n          //获取仓库里面购物车的数据\r\n          state.shopCartInfo[0].cartInfoList.forEach(item => {\r\n               //商品的勾选状态是勾选的,发请求一个一个删除\r\n               if (item.isChecked == 1) {\r\n                    let ps = dispatch('deleteCartById', item.skuId);\r\n                    arr.push(ps);\r\n               }\r\n          })\r\n          return Promise.all(arr);\r\n     }\r\n\r\n};\r\nlet getters = {\r\n\r\n     //计算数组里面第一个元素：对象\r\n     CartInfo(state) {\r\n          return state.shopCartInfo[0] || {};\r\n     },\r\n};\r\n\r\n//对外暴露\r\nexport default {\r\n     state,\r\n     mutations,\r\n     actions,\r\n     getters\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}