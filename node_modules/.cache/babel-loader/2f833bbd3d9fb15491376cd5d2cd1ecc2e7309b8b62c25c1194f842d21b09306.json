{"ast":null,"code":"//登录、注册模块的小仓库\nimport { reqGetCode, reqRegister, reqUserLogin, reqUserInfo, reqUserLogout } from '@/api';\nlet state = {\n  //验证码\n  code: '',\n  //身份标识符很重要【存储在vuex】\n  token: localStorage.getItem(\"TOKEN\"),\n  //用户名\n  nickName: ''\n};\nlet mutations = {\n  GETCODE(state, code) {\n    state.code = code;\n  },\n  SET_TOKEN(state, token) {\n    state.token = token;\n  },\n  SET_USERINFO(state, nickName) {\n    state.nickName = nickName;\n  },\n  CLEAR(state) {\n    //清除仓库相关用户信息\n    state.token = '';\n    state.nickName = '';\n    //本地存储令牌清空\n    localStorage.removeItem('TOKEN');\n  }\n};\nlet actions = {\n  //获取验证码\n  async getCode({\n    commit,\n    state,\n    dispatch\n  }, phone) {\n    console.log(result);\n    let result = await reqGetCode(phone);\n    if (result.code == 200) {\n      commit('GETCODE', result.data);\n      return 'ok';\n    } else {\n      return Promise.reject();\n    }\n  },\n  //注册用户的地方\n  async registerUser({\n    commit,\n    state,\n    dispatch\n  }, obj) {\n    //注册接口没有返回data,不需要提交mutation\n    let result = await reqRegister(obj);\n    if (result.code == 200) {\n      //注册成功\n      return 'ok';\n    } else {\n      //注册失败\n      return Promise.reject(new Error(result.message));\n    }\n  },\n  //用户登录的地方:非常非常重要\n  async userLogin({\n    commit,\n    state,\n    dispatch\n  }, data) {\n    //接口说明:后台老师目前登录接口返回数据不正确的，以后工作的时候登录接口成功，返回格式100%和相面例子一样的!!!\n    /*\r\n      举例子\r\n       {\r\n             code:200,\r\n             data:{\r\n                  token:'1e4vdadhajkhdakj6sahdajk'\r\n             },\r\n             message:'登录成功'\r\n       }\r\n    */\n    let result = await reqUserLogin(data);\n    //登录成功\n    if (result.code == 200) {\n      commit('SET_TOKEN', result.data.token);\n      //以后开发的时候:经常的登录的成功获取token【持久化存储】\n      localStorage.setItem('TOKEN', result.data.token);\n      return 'ok';\n    } else {\n      //登录失败\n      return Promise.reject(new Error(result.message));\n    }\n  },\n  //获取用户信息\n  async getUserInfo({\n    commit,\n    state,\n    dispatch\n  }) {\n    let result = await reqUserInfo();\n    if (result.code == 200) {\n      commit('SET_USERINFO', result.data.nickName);\n      return 'ok';\n    } else {\n      return Promise.reject();\n    }\n  },\n  //退出登录的业务\n  async logout({\n    commit,\n    state,\n    dispatch\n  }) {\n    //发请求通知服务器销毁当前token【学生证】\n    let result = await reqUserLogout();\n    if (result.code == 200) {\n      commit('CLEAR');\n      return 'ok';\n    } else {\n      return Promise.reject(new Error(result.message));\n    }\n  }\n};\nlet getters = {};\n\n//对外暴露\nexport default {\n  state,\n  mutations,\n  actions,\n  getters\n};","map":{"version":3,"names":["reqGetCode","reqRegister","reqUserLogin","reqUserInfo","reqUserLogout","state","code","token","localStorage","getItem","nickName","mutations","GETCODE","SET_TOKEN","SET_USERINFO","CLEAR","removeItem","actions","getCode","commit","dispatch","phone","console","log","result","data","Promise","reject","registerUser","obj","Error","message","userLogin","setItem","getUserInfo","logout","getters"],"sources":["E:/360MoveData/Users/Admin/Desktop/qian/cil/shangpinhui/src/store/user/index.js"],"sourcesContent":["//登录、注册模块的小仓库\r\nimport { reqGetCode, reqRegister, reqUserLogin, reqUserInfo, reqUserLogout } from '@/api';\r\nlet state = {\r\n     //验证码\r\n     code: '',\r\n     //身份标识符很重要【存储在vuex】\r\n     token: localStorage.getItem(\"TOKEN\"),\r\n     //用户名\r\n     nickName: ''\r\n};\r\nlet mutations = {\r\n     GETCODE(state, code) {\r\n          state.code = code;\r\n     },\r\n     SET_TOKEN(state, token) {\r\n          state.token = token;\r\n     },\r\n     SET_USERINFO(state, nickName) {\r\n          state.nickName = nickName;\r\n     },\r\n     CLEAR(state) {\r\n          //清除仓库相关用户信息\r\n          state.token = '';\r\n          state.nickName = '';\r\n          //本地存储令牌清空\r\n          localStorage.removeItem('TOKEN');\r\n     }\r\n};\r\nlet actions = {\r\n     //获取验证码\r\n     async getCode({ commit, state, dispatch }, phone) {\r\n          console.log(result)\r\n          let result = await reqGetCode(phone)\r\n  \r\n          if (result.code == 200) {\r\n\r\n               commit('GETCODE', result.data);\r\n               return 'ok';\r\n          } else {\r\n               return Promise.reject();\r\n          }\r\n     }\r\n     ,\r\n     //注册用户的地方\r\n     async registerUser({ commit, state, dispatch }, obj) {\r\n          //注册接口没有返回data,不需要提交mutation\r\n          let result = await reqRegister(obj);\r\n          if (result.code == 200) {\r\n               //注册成功\r\n               return 'ok';\r\n          } else {\r\n               //注册失败\r\n               return Promise.reject(new Error(result.message));\r\n          }\r\n     }\r\n     ,\r\n     //用户登录的地方:非常非常重要\r\n     async userLogin({ commit, state, dispatch }, data) {\r\n          //接口说明:后台老师目前登录接口返回数据不正确的，以后工作的时候登录接口成功，返回格式100%和相面例子一样的!!!\r\n          /*\r\n            举例子\r\n             {\r\n                   code:200,\r\n                   data:{\r\n                        token:'1e4vdadhajkhdakj6sahdajk'\r\n                   },\r\n                   message:'登录成功'\r\n             }\r\n          */\r\n          let result = await reqUserLogin(data);\r\n          //登录成功\r\n          if (result.code == 200) {\r\n               commit('SET_TOKEN', result.data.token);\r\n               //以后开发的时候:经常的登录的成功获取token【持久化存储】\r\n               localStorage.setItem('TOKEN', result.data.token);\r\n               return 'ok';\r\n          } else {\r\n               //登录失败\r\n               return Promise.reject(new Error(result.message));\r\n          }\r\n\r\n     }\r\n     ,\r\n     //获取用户信息\r\n     async getUserInfo({ commit, state, dispatch }) {\r\n          let result = await reqUserInfo();\r\n          if (result.code == 200) {\r\n               commit('SET_USERINFO', result.data.nickName);\r\n               return 'ok';\r\n          } else {\r\n               return Promise.reject();\r\n          }\r\n     },\r\n     //退出登录的业务\r\n     async logout({ commit, state, dispatch }) {\r\n          //发请求通知服务器销毁当前token【学生证】\r\n          let result = await reqUserLogout();\r\n          if (result.code == 200) {\r\n               commit('CLEAR');\r\n               return 'ok';\r\n          } else {\r\n               return Promise.reject(new Error(result.message));\r\n          }\r\n     }\r\n};\r\nlet getters = {};\r\n\r\n//对外暴露\r\nexport default {\r\n     state,\r\n     mutations,\r\n     actions,\r\n     getters\r\n}"],"mappings":"AAAA;AACA,SAASA,UAAU,EAAEC,WAAW,EAAEC,YAAY,EAAEC,WAAW,EAAEC,aAAa,QAAQ,OAAO;AACzF,IAAIC,KAAK,GAAG;EACP;EACAC,IAAI,EAAE,EAAE;EACR;EACAC,KAAK,EAAEC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EACpC;EACAC,QAAQ,EAAE;AACf,CAAC;AACD,IAAIC,SAAS,GAAG;EACXC,OAAOA,CAACP,KAAK,EAAEC,IAAI,EAAE;IAChBD,KAAK,CAACC,IAAI,GAAGA,IAAI;EACtB,CAAC;EACDO,SAASA,CAACR,KAAK,EAAEE,KAAK,EAAE;IACnBF,KAAK,CAACE,KAAK,GAAGA,KAAK;EACxB,CAAC;EACDO,YAAYA,CAACT,KAAK,EAAEK,QAAQ,EAAE;IACzBL,KAAK,CAACK,QAAQ,GAAGA,QAAQ;EAC9B,CAAC;EACDK,KAAKA,CAACV,KAAK,EAAE;IACR;IACAA,KAAK,CAACE,KAAK,GAAG,EAAE;IAChBF,KAAK,CAACK,QAAQ,GAAG,EAAE;IACnB;IACAF,YAAY,CAACQ,UAAU,CAAC,OAAO,CAAC;EACrC;AACL,CAAC;AACD,IAAIC,OAAO,GAAG;EACT;EACA,MAAMC,OAAOA,CAAC;IAAEC,MAAM;IAAEd,KAAK;IAAEe;EAAS,CAAC,EAAEC,KAAK,EAAE;IAC7CC,OAAO,CAACC,GAAG,CAACC,MAAM,CAAC;IACnB,IAAIA,MAAM,GAAG,MAAMxB,UAAU,CAACqB,KAAK,CAAC;IAEpC,IAAIG,MAAM,CAAClB,IAAI,IAAI,GAAG,EAAE;MAEnBa,MAAM,CAAC,SAAS,EAAEK,MAAM,CAACC,IAAI,CAAC;MAC9B,OAAO,IAAI;IAChB,CAAC,MAAM;MACF,OAAOC,OAAO,CAACC,MAAM,EAAE;IAC5B;EACL,CAAC;EAED;EACA,MAAMC,YAAYA,CAAC;IAAET,MAAM;IAAEd,KAAK;IAAEe;EAAS,CAAC,EAAES,GAAG,EAAE;IAChD;IACA,IAAIL,MAAM,GAAG,MAAMvB,WAAW,CAAC4B,GAAG,CAAC;IACnC,IAAIL,MAAM,CAAClB,IAAI,IAAI,GAAG,EAAE;MACnB;MACA,OAAO,IAAI;IAChB,CAAC,MAAM;MACF;MACA,OAAOoB,OAAO,CAACC,MAAM,CAAC,IAAIG,KAAK,CAACN,MAAM,CAACO,OAAO,CAAC,CAAC;IACrD;EACL,CAAC;EAED;EACA,MAAMC,SAASA,CAAC;IAAEb,MAAM;IAAEd,KAAK;IAAEe;EAAS,CAAC,EAAEK,IAAI,EAAE;IAC9C;IACA;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACU,IAAID,MAAM,GAAG,MAAMtB,YAAY,CAACuB,IAAI,CAAC;IACrC;IACA,IAAID,MAAM,CAAClB,IAAI,IAAI,GAAG,EAAE;MACnBa,MAAM,CAAC,WAAW,EAAEK,MAAM,CAACC,IAAI,CAAClB,KAAK,CAAC;MACtC;MACAC,YAAY,CAACyB,OAAO,CAAC,OAAO,EAAET,MAAM,CAACC,IAAI,CAAClB,KAAK,CAAC;MAChD,OAAO,IAAI;IAChB,CAAC,MAAM;MACF;MACA,OAAOmB,OAAO,CAACC,MAAM,CAAC,IAAIG,KAAK,CAACN,MAAM,CAACO,OAAO,CAAC,CAAC;IACrD;EAEL,CAAC;EAED;EACA,MAAMG,WAAWA,CAAC;IAAEf,MAAM;IAAEd,KAAK;IAAEe;EAAS,CAAC,EAAE;IAC1C,IAAII,MAAM,GAAG,MAAMrB,WAAW,EAAE;IAChC,IAAIqB,MAAM,CAAClB,IAAI,IAAI,GAAG,EAAE;MACnBa,MAAM,CAAC,cAAc,EAAEK,MAAM,CAACC,IAAI,CAACf,QAAQ,CAAC;MAC5C,OAAO,IAAI;IAChB,CAAC,MAAM;MACF,OAAOgB,OAAO,CAACC,MAAM,EAAE;IAC5B;EACL,CAAC;EACD;EACA,MAAMQ,MAAMA,CAAC;IAAEhB,MAAM;IAAEd,KAAK;IAAEe;EAAS,CAAC,EAAE;IACrC;IACA,IAAII,MAAM,GAAG,MAAMpB,aAAa,EAAE;IAClC,IAAIoB,MAAM,CAAClB,IAAI,IAAI,GAAG,EAAE;MACnBa,MAAM,CAAC,OAAO,CAAC;MACf,OAAO,IAAI;IAChB,CAAC,MAAM;MACF,OAAOO,OAAO,CAACC,MAAM,CAAC,IAAIG,KAAK,CAACN,MAAM,CAACO,OAAO,CAAC,CAAC;IACrD;EACL;AACL,CAAC;AACD,IAAIK,OAAO,GAAG,CAAC,CAAC;;AAEhB;AACA,eAAe;EACV/B,KAAK;EACLM,SAAS;EACTM,OAAO;EACPmB;AACL,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}