{"ast":null,"code":"import Vue from \"vue\";\nimport Vuerouter from \"vue-router\";\nVue.use(Vuerouter);\nimport store from '../store';\nimport addcartsuccess from \"@/pages/addcartsuccess/index.vue\";\nimport Home from \"@/pages/home/index.vue\";\nimport Trade from \"@/pages/trade/index.vue\";\nimport Login from \"@/pages/login/index.vue\";\nimport Register from \"@/pages/register/index.vue\";\nimport Search from \"@/pages/search/index.vue\";\nimport Detail from \"@/pages/detail/index.vue\";\nimport Shopcart from \"@/pages/shopcart/index.vue\";\nlet router = new Vuerouter({\n  routes: [{\n    path: '/',\n    redirect: '/home'\n  }, {\n    path: '/home',\n    component: Home,\n    name: 'home',\n    meta: {\n      show: true\n    }\n  }, {\n    path: '/login',\n    component: Login,\n    meta: {\n      show: false\n    }\n  }, {\n    path: '/trade',\n    component: Trade,\n    beforeEnter(to, from, next) {},\n    meta: {\n      show: true\n    }\n  }, {\n    path: '/register',\n    component: Register,\n    meta: {\n      show: false\n    }\n  }, {\n    path: '/search/:keyword?',\n    component: Search,\n    name: 'search',\n    meta: {\n      show: true\n    }\n  }, {\n    path: '/detail/:spid',\n    component: Detail,\n    name: 'detail',\n    meta: {\n      show: true\n    }\n  }, {\n    path: '/addcartsuccess',\n    component: addcartsuccess,\n    name: 'addcartsuccess',\n    meta: {\n      show: true\n    }\n  }, {\n    path: '/shopcart',\n    component: Shopcart,\n    name: 'shopcart',\n    meta: {\n      show: true\n    }\n  }],\n  scrollBehavior() {\n    return {\n      x: 0,\n      y: 0\n    };\n  }\n});\nrouter.beforeEach(async (to, from, next) => {\n  //to:去的那个路由的信息\n  //from:从那个路由而来的信息\n  //next:放行函数!!!!!! \n  //第一种：next(),放行函数，放行到它想去的路由！！！\n  //第二种:next(path),守卫指定放行到那个路由去?\n\n  //用户是否登录:取决于仓库里面是否有token！！！\n  //每一次路由跳转之前需要用有用户信息在跳转,没有发请求获取用户信息在跳转！！！！\n  //token\n  let hasToken = store.state.user.token;\n  //用户信息\n  let hasNickName = store.state.user.userdata.nickName;\n  //用户登录\n  if (hasToken) {\n    //用户登录了,不能去login\n    if (to.path == \"/login\") {\n      next('/home');\n    } else {\n      //用户登陆了,而且还有用户信息【去的并非是login】\n      if (hasNickName) {\n        next();\n      } else {\n        //用户登陆了,但是没有用户信息 \n        try {\n          //发请求获取用户信息以后在放行\n          await store.dispatch('getUserInfo');\n          next();\n        } catch (error) {\n          //用户没有信息，还携带token发请求获取用户信息【失败】\n          //token【学生证失效了】\n          //token失效:本地清空数据、服务器的token通知服务器清除\n          await store.dispatch('logout');\n          //回到登录页，重新获取一个新的学生证\n          next('/login');\n        }\n      }\n    }\n  } else {\n    next();\n    //用户未登录||目前的判断都是放行.将来这里会'回手掏'增加一些判断\n    //用户未登录:不能进入/trade、/pay、/paysuccess、/center、/center/myorder  /center/teamorder\n    // let toPath = to.path;\n    // if (toPath.indexOf('trade') != -1 || toPath.indexOf('pay') != -1 || toPath.indexOf('center') != -1) {\n    //     next('/login?redirect=' + toPath);\n    // } else {\n    //     next();\n    // }\n  }\n});\n\nexport default router;","map":{"version":3,"names":["Vue","Vuerouter","use","store","addcartsuccess","Home","Trade","Login","Register","Search","Detail","Shopcart","router","routes","path","redirect","component","name","meta","show","beforeEnter","to","from","next","scrollBehavior","x","y","beforeEach","hasToken","state","user","token","hasNickName","userdata","nickName","dispatch","error"],"sources":["E:/360MoveData/Users/Admin/Desktop/qian/cil/shangpinhui/src/router/router.js"],"sourcesContent":["import Vue from \"vue\";\r\nimport Vuerouter from \"vue-router\"\r\nVue.use(Vuerouter)\r\n\r\nimport store from '../store'\r\nimport addcartsuccess from \"@/pages/addcartsuccess/index.vue\"\r\nimport Home from \"@/pages/home/index.vue\"\r\nimport Trade from \"@/pages/trade/index.vue\"\r\nimport Login from \"@/pages/login/index.vue\"\r\nimport Register from \"@/pages/register/index.vue\"\r\nimport Search from \"@/pages/search/index.vue\"\r\nimport Detail from \"@/pages/detail/index.vue\"\r\nimport Shopcart from \"@/pages/shopcart/index.vue\"\r\nlet router = new Vuerouter({\r\n    routes: [\r\n        {\r\n            path: '/',\r\n            redirect: '/home'\r\n        },\r\n        {\r\n            path: '/home',\r\n            component: Home,\r\n            name: 'home',\r\n            meta: {\r\n                show: true\r\n            }\r\n        },\r\n        {\r\n            path: '/login',\r\n            component: Login,\r\n            meta: {\r\n                show: false\r\n            }\r\n        },\r\n        {\r\n            path: '/trade',\r\n            component: Trade,\r\n            beforeEnter(to, from, next) {\r\n              \r\n            },\r\n            meta: {\r\n                show: true\r\n            }\r\n        },\r\n        {\r\n            path: '/register',\r\n            component: Register,\r\n            meta: {\r\n                show: false\r\n            }\r\n        },\r\n        {\r\n            path: '/search/:keyword?',\r\n            component: Search,\r\n\r\n            name: 'search',\r\n            meta: {\r\n                show: true\r\n            }\r\n        },\r\n        {\r\n            path: '/detail/:spid',\r\n            component: Detail,\r\n\r\n            name: 'detail',\r\n            meta: {\r\n                show: true\r\n            }\r\n        },\r\n        {\r\n            path: '/addcartsuccess',\r\n            component: addcartsuccess,\r\n\r\n            name: 'addcartsuccess',\r\n            meta: {\r\n                show: true\r\n            }\r\n        },\r\n        {\r\n            path: '/shopcart',\r\n            component: Shopcart,\r\n\r\n            name: 'shopcart',\r\n            meta: {\r\n                show: true\r\n            }\r\n        }\r\n    ],\r\n    scrollBehavior() {\r\n        return { x: 0, y: 0 }\r\n    }\r\n\r\n})\r\n\r\nrouter.beforeEach(async (to, from, next) => {\r\n    //to:去的那个路由的信息\r\n    //from:从那个路由而来的信息\r\n    //next:放行函数!!!!!! \r\n    //第一种：next(),放行函数，放行到它想去的路由！！！\r\n    //第二种:next(path),守卫指定放行到那个路由去?\r\n\r\n    //用户是否登录:取决于仓库里面是否有token！！！\r\n    //每一次路由跳转之前需要用有用户信息在跳转,没有发请求获取用户信息在跳转！！！！\r\n    //token\r\n    let hasToken = store.state.user.token;\r\n    //用户信息\r\n    let hasNickName = store.state.user.userdata.nickName;\r\n    //用户登录\r\n    if (hasToken) {\r\n        //用户登录了,不能去login\r\n        if (to.path == \"/login\") {\r\n            next('/home');\r\n        } else {\r\n            //用户登陆了,而且还有用户信息【去的并非是login】\r\n            if (hasNickName) {\r\n                next();\r\n            } else {\r\n                //用户登陆了,但是没有用户信息 \r\n                try {\r\n                    //发请求获取用户信息以后在放行\r\n                    await store.dispatch('getUserInfo');\r\n                    next();\r\n                } catch (error) {\r\n                    //用户没有信息，还携带token发请求获取用户信息【失败】\r\n                    //token【学生证失效了】\r\n                    //token失效:本地清空数据、服务器的token通知服务器清除\r\n                    await store.dispatch('logout');\r\n                    //回到登录页，重新获取一个新的学生证\r\n                    next('/login');\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n        next()\r\n        //用户未登录||目前的判断都是放行.将来这里会'回手掏'增加一些判断\r\n        //用户未登录:不能进入/trade、/pay、/paysuccess、/center、/center/myorder  /center/teamorder\r\n        // let toPath = to.path;\r\n        // if (toPath.indexOf('trade') != -1 || toPath.indexOf('pay') != -1 || toPath.indexOf('center') != -1) {\r\n        //     next('/login?redirect=' + toPath);\r\n        // } else {\r\n        //     next();\r\n        // }\r\n    }\r\n});\r\n\r\nexport default router"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}