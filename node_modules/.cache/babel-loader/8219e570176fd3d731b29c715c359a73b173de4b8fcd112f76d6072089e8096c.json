{"ast":null,"code":"import { mapGetters } from \"vuex\";\n//按需引入lodash节流函数\nimport throttle from \"lodash/throttle\";\n//按需引入lodash防抖函数\nimport debounce from \"lodash/debounce\";\nexport default {\n  name: \"ShopCart\",\n  //组件挂载完毕,获取购物车的数据\n  mounted() {\n    //获取购物车的数据\n    this.getData();\n  },\n  computed: {\n    ...mapGetters([\"CartInfo\"]),\n    //购物车的数据\n    cartInfoList() {\n      return this.CartInfo.cartInfoList || [];\n    },\n    //购物车商品总价\n    totalPrice() {\n      return this.cartInfoList.reduce((a, b) => a + b.skuPrice * b.skuNum, 0);\n    },\n    isCartChecked() {\n      //购物车里面的数据进行过滤(勾选)，如果勾选的商品与购物车商品总数相等。全选勾选！相反不够！！！\n      return this.cartInfoList.every(item => item.isChecked == \"1\");\n    }\n  },\n  methods: {\n    //获取购物车的数据请求函数\n    getData() {\n      this.$store.dispatch(\"getShopCart\");\n    },\n    //修改商品数据->加的操作\n    async addSkuNum(cart) {\n      //整理参数\n      let params = {\n        skuId: cart.skuId,\n        skuNum: 1\n      };\n      //发请求:通知服务器修改当前商品的个数\n      //再次获取购物车的最新的数据：保证这次修改数据完毕【成功以后在获取购物车数据】\n      try {\n        //修改商品个数成功\n        await this.$store.dispatch(\"addOrUpdateCart\", params);\n        //再次获取最新的购物车的数据\n        this.getData();\n      } catch (error) {\n        alert(\"修改数量失败\");\n      }\n    },\n    //修改商品数据-减的操作\n    minusSkuNum: throttle(async function (cart) {\n      if (cart.skuNum > 1) {\n        //整理参数:至少加入购物车的数量最低1个\n        let params = {\n          skuId: cart.skuId,\n          skuNum: -1\n        };\n        //修改商品的数据\n        try {\n          //修改商品的个数、成功以后再次获取购物车的数据\n          await this.$store.dispatch(\"addOrUpdateCart\", params);\n          this.getData();\n        } catch (error) {}\n      }\n    }, 2000),\n    changeSkuNum: debounce(async function (cart, e) {\n      //整理参数\n      let params = {\n        skuId: cart.skuId\n      };\n      //计算出SkuNum携带的数据\n      let userResultValue = e.target.value * 1;\n      //用户输入完毕，最终结果【非法条件】\n      if (isNaN(userResultValue) || userResultValue < 1) {\n        params.skuNum = 0;\n      } else {\n        //正常情况\n        params.skuNum = parseInt(userResultValue) - cart.skuNum;\n      }\n      //发请求：修改商品的个数\n      try {\n        //修改商品的个数、成功以后再次获取购物车的数据\n        await this.$store.dispatch(\"addOrUpdateCart\", params);\n        // this.getData();\n      } catch (error) {}\n    }, 500),\n    //删除某一个商品\n    async deleteCartById(cart) {\n      //整理参数\n      let skuId = cart.skuId;\n      try {\n        //删除商品成功\n        await this.$store.dispatch(\"deleteCartById\", skuId);\n        //再次获取购物车最新的数据\n        this.getData();\n      } catch (error) {\n        alert(\"删除失败\");\n      }\n    },\n    //修改某一个商品的勾选的状态\n    async changeChecked(cart, e) {\n      //整理参数\n      let params = {\n        skuId: cart.skuId,\n        isChecked: e.target.checked ? \"1\" : \"0\"\n      };\n      //发请求:修改商品的勾选的状态\n      try {\n        await this.$store.dispatch(\"changeChecked\", params);\n        this.getData();\n      } catch (error) {}\n    },\n    //全选的业务\n    async updateAllChecked(e) {\n      //获取全选的复选框勾选的状态,接口需要的1|0\n      let isChecked = e.target.checked ? \"1\" : \"0\";\n      try {\n        //await等待成功:购物车全部商品勾选状态成功以后\n        await this.$store.dispatch(\"allUpdateChecked\", isChecked);\n        this.getData();\n      } catch (error) {\n        alert(\"修改失败\");\n      }\n    },\n    //删除选中的商品\n    async deleteAllCart() {\n      try {\n        //等待全部勾选商品删除以后\n        await this.$store.dispatch(\"deleteAllCart\");\n        //再次获取购物车的数据\n        this.getData();\n      } catch (error) {\n        alert(\"删除失败\");\n      }\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}