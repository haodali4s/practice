{"ast":null,"code":"//home模块专享的小仓库\n//任何的小仓库:state、mutations、actions、getters \n//引入请求函数\nimport { reqCategory, reqBannerList, reqFloorList } from '@/api';\n//仓库存储数据的地方\nlet state = {\n  //商品分类的数据,仓库里面数据起始数值不要瞎写【服务器返回的是啥】\n  category: [],\n  //首页轮播图的数据\n  bannerList: [],\n  //floor数据\n  floorList: []\n};\n//唯一可以修改仓库数据地方【工人】\nlet mutations = {\n  GETCATEGORY(state, category) {\n    state.category = category;\n  },\n  GETBANNERLIST(state, bannerList) {\n    state.bannerList = bannerList;\n    // console.log('mutation修改数据')\n  },\n\n  GETFLOORLIST(state, floorList) {\n    state.floorList = floorList;\n  }\n};\n//可以处理业务逻辑【if、异步语句等等】\nlet actions = {\n  //商品分类的actions\n  //actions地盘:可不可以书写异步语句\n  async getCategory({\n    commit,\n    state,\n    dispatch\n  }) {\n    //获取服务器的数据,存储在vuex仓库中\n    //reqCategory函数执行,返回的是Promise对象【pending、成功、失败】\n    //await 等待成功的结果\n    let result = await reqCategory();\n    //判断服务器返回的状态是200->成功\n    if (result.code == 200) {\n      //提交mutation存储服务器数据\n      commit(\"GETCATEGORY\", result.data);\n    }\n  },\n  //获取banner图的action\n  async getBannerList({\n    commit,\n    state,\n    dispatch\n  }) {\n    //获取首页数据\n    let result = await reqBannerList();\n    if (result.code == 200) {\n      // console.log('actions发请求')\n      commit(\"GETBANNERLIST\", result.data);\n    }\n  },\n  //获取Floor组件的数据\n  async getFloorList({\n    commit,\n    state,\n    dispatch\n  }) {\n    let result = await reqFloorList();\n    if (result.code == 200) {\n      commit('GETFLOORLIST', result.data);\n      // console.log(result.data);\n    }\n  }\n};\n//仓库计算属性\nlet getters = {};\n\n//对外暴露小仓库\nexport default {\n  state,\n  mutations,\n  actions,\n  getters\n};","map":{"version":3,"names":["reqCategory","reqBannerList","reqFloorList","state","category","bannerList","floorList","mutations","GETCATEGORY","GETBANNERLIST","GETFLOORLIST","actions","getCategory","commit","dispatch","result","code","data","getBannerList","getFloorList","getters"],"sources":["C:/Users/hasee/Desktop/cil/shangpinhui/src/store/home/index.js"],"sourcesContent":["//home模块专享的小仓库\r\n//任何的小仓库:state、mutations、actions、getters \r\n//引入请求函数\r\nimport { reqCategory, reqBannerList, reqFloorList } from '@/api'\r\n//仓库存储数据的地方\r\nlet state = {\r\n    //商品分类的数据,仓库里面数据起始数值不要瞎写【服务器返回的是啥】\r\n    category: [],\r\n    //首页轮播图的数据\r\n    bannerList: [],\r\n    //floor数据\r\n    floorList:[]\r\n};\r\n//唯一可以修改仓库数据地方【工人】\r\nlet mutations = {\r\n\r\n    GETCATEGORY(state, category) {\r\n        state.category = category;\r\n    }\r\n    ,\r\n    GETBANNERLIST(state, bannerList) {\r\n        state.bannerList = bannerList;\r\n        // console.log('mutation修改数据')\r\n    },\r\n    GETFLOORLIST(state,floorList){\r\n        state.floorList = floorList;\r\n    }\r\n\r\n};\r\n//可以处理业务逻辑【if、异步语句等等】\r\nlet actions = {\r\n    //商品分类的actions\r\n    //actions地盘:可不可以书写异步语句\r\n    async getCategory({ commit, state, dispatch }) {\r\n        //获取服务器的数据,存储在vuex仓库中\r\n        //reqCategory函数执行,返回的是Promise对象【pending、成功、失败】\r\n        //await 等待成功的结果\r\n        let result = await reqCategory();\r\n        //判断服务器返回的状态是200->成功\r\n        if (result.code == 200) {\r\n            //提交mutation存储服务器数据\r\n            commit(\"GETCATEGORY\", result.data);\r\n        }\r\n    },\r\n    //获取banner图的action\r\n    async getBannerList({ commit, state, dispatch }) {\r\n        //获取首页数据\r\n        let result = await reqBannerList();\r\n        if (result.code == 200) {\r\n            // console.log('actions发请求')\r\n            commit(\"GETBANNERLIST\", result.data);\r\n        }\r\n    },\r\n    //获取Floor组件的数据\r\n    async getFloorList({ commit, state, dispatch }) {\r\n        let result = await reqFloorList();\r\n        if (result.code == 200) {\r\n            commit('GETFLOORLIST', result.data);\r\n            // console.log(result.data);\r\n        }\r\n    }\r\n};\r\n//仓库计算属性\r\nlet getters = {};\r\n\r\n//对外暴露小仓库\r\nexport default {\r\n    state,\r\n    mutations,\r\n    actions,\r\n    getters\r\n}\r\n\r\n\r\n\r\n\r\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,WAAW,EAAEC,aAAa,EAAEC,YAAY,QAAQ,OAAO;AAChE;AACA,IAAIC,KAAK,GAAG;EACR;EACAC,QAAQ,EAAE,EAAE;EACZ;EACAC,UAAU,EAAE,EAAE;EACd;EACAC,SAAS,EAAC;AACd,CAAC;AACD;AACA,IAAIC,SAAS,GAAG;EAEZC,WAAWA,CAACL,KAAK,EAAEC,QAAQ,EAAE;IACzBD,KAAK,CAACC,QAAQ,GAAGA,QAAQ;EAC7B,CAAC;EAEDK,aAAaA,CAACN,KAAK,EAAEE,UAAU,EAAE;IAC7BF,KAAK,CAACE,UAAU,GAAGA,UAAU;IAC7B;EACJ,CAAC;;EACDK,YAAYA,CAACP,KAAK,EAACG,SAAS,EAAC;IACzBH,KAAK,CAACG,SAAS,GAAGA,SAAS;EAC/B;AAEJ,CAAC;AACD;AACA,IAAIK,OAAO,GAAG;EACV;EACA;EACA,MAAMC,WAAWA,CAAC;IAAEC,MAAM;IAAEV,KAAK;IAAEW;EAAS,CAAC,EAAE;IAC3C;IACA;IACA;IACA,IAAIC,MAAM,GAAG,MAAMf,WAAW,EAAE;IAChC;IACA,IAAIe,MAAM,CAACC,IAAI,IAAI,GAAG,EAAE;MACpB;MACAH,MAAM,CAAC,aAAa,EAAEE,MAAM,CAACE,IAAI,CAAC;IACtC;EACJ,CAAC;EACD;EACA,MAAMC,aAAaA,CAAC;IAAEL,MAAM;IAAEV,KAAK;IAAEW;EAAS,CAAC,EAAE;IAC7C;IACA,IAAIC,MAAM,GAAG,MAAMd,aAAa,EAAE;IAClC,IAAIc,MAAM,CAACC,IAAI,IAAI,GAAG,EAAE;MACpB;MACAH,MAAM,CAAC,eAAe,EAAEE,MAAM,CAACE,IAAI,CAAC;IACxC;EACJ,CAAC;EACD;EACA,MAAME,YAAYA,CAAC;IAAEN,MAAM;IAAEV,KAAK;IAAEW;EAAS,CAAC,EAAE;IAC5C,IAAIC,MAAM,GAAG,MAAMb,YAAY,EAAE;IACjC,IAAIa,MAAM,CAACC,IAAI,IAAI,GAAG,EAAE;MACpBH,MAAM,CAAC,cAAc,EAAEE,MAAM,CAACE,IAAI,CAAC;MACnC;IACJ;EACJ;AACJ,CAAC;AACD;AACA,IAAIG,OAAO,GAAG,CAAC,CAAC;;AAEhB;AACA,eAAe;EACXjB,KAAK;EACLI,SAAS;EACTI,OAAO;EACPS;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}