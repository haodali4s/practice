{"ast":null,"code":"//登录、注册模块的小仓库\nimport { reqGetCode, reqRegister, reqUserLogin, reqUserInfo, reqUserLogout } from '@/api';\nlet state = {\n  //验证码\n  code: '',\n  //身份标识符很重要【存储在vuex】\n  token: localStorage.getItem(\"TOKEN\"),\n  //用户名\n  userdata: ''\n};\nlet mutations = {\n  GETCODE(state, code) {\n    state.code = code;\n  },\n  SET_TOKEN(state, token) {\n    state.token = token;\n  },\n  SET_USERINFO(state, userdata) {\n    state.userdata = userdata;\n  },\n  CLEAR(state) {\n    //清除仓库相关用户信息\n    state.token = '';\n    state.userdata = '';\n    //本地存储令牌清空\n    localStorage.removeItem('TOKEN');\n  }\n};\nlet actions = {\n  //获取验证码\n  async getCode({\n    commit,\n    state,\n    dispatch\n  }, phone) {\n    let result = await reqGetCode(phone);\n    if (result.code == 200) {\n      commit('GETCODE', result.data);\n      return 'ok';\n    } else {\n      return Promise.reject();\n    }\n  },\n  //注册用户的地方\n  async registerUser({\n    commit,\n    state,\n    dispatch\n  }, obj) {\n    //注册接口没有返回data,不需要提交mutation\n    console.log('1');\n    let result = await reqRegister(obj);\n    if (result.code == 200) {\n      //注册成功\n      return 'ok';\n    } else {\n      //注册失败\n      return Promise.reject(new Error(result.message));\n    }\n  },\n  //用户登录的地方:非常非常重要\n  async userLogin({\n    commit,\n    state,\n    dispatch\n  }, data) {\n    //接口说明:后台老师目前登录接口返回数据不正确的，以后工作的时候登录接口成功，返回格式100%和相面例子一样的!!!\n    /*\r\n      举例子\r\n       {\r\n             code:200,\r\n             data:{\r\n                  token:'1e4vdadhajkhdakj6sahdajk'\r\n             },\r\n             message:'登录成功'\r\n       }\r\n    */\n    let result = await reqUserLogin(data);\n    //登录成功\n    if (result.code == 200) {\n      commit('SET_TOKEN', result.data.token);\n      //以后开发的时候:经常的登录的成功获取token【持久化存储】\n      localStorage.setItem('TOKEN', result.data.token);\n      return 'ok';\n    } else {\n      //登录失败\n      return Promise.reject(new Error(result.message));\n    }\n  },\n  //获取用户信息\n  async getUserInfo({\n    commit,\n    state,\n    dispatch\n  }) {\n    let result = await reqUserInfo();\n    if (result.code == 200) {\n      commit('SET_USERINFO', result.data);\n      return 'ok';\n    } else {\n      return Promise.reject(result.code);\n    }\n  },\n  //退出登录的业务\n  async logout({\n    commit,\n    state,\n    dispatch\n  }) {\n    //发请求通知服务器销毁当前token【学生证】\n    let result = await reqUserLogout();\n    if (result.code == 200) {\n      commit('CLEAR');\n      return 'ok';\n    } else {\n      return Promise.reject(new Error(result.message));\n    }\n  }\n};\nlet getters = {};\n\n//对外暴露\nexport default {\n  state,\n  mutations,\n  actions,\n  getters\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}