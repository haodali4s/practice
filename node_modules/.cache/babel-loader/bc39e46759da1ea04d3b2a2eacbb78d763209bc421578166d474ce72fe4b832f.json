{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n//购物车小仓库\nimport { reqShopCart, reqDeleteCart, reqUpdateChecked } from '@/api';\n//规范:利用vuex存储数据\nimport { SET_USERID } from '@/utils/USER_ID';\nlet state = {\n  //vuex仓库存储用户临时身份,vuex存储数据确实非持久化的，SET_USERID执行返回结果,可是本地存储获取的！！\n  USER_ID: SET_USERID(),\n  shopCartInfo: []\n};\nlet mutations = {\n  GETSHOPCART(state, payload) {\n    state.shopCartInfo = payload;\n  }\n};\nlet actions = {\n  //获取用户购物车的数据\n  async getShopCart({\n    commit,\n    state,\n    dispatch\n  }) {\n    let result = await reqShopCart();\n    if (result.code == 200) {\n      commit('GETSHOPCART', result.data);\n    }\n  },\n  //删除某一个商品的数据\n  async deleteCartById({\n    commit,\n    state,\n    dispatch\n  }, skuId) {\n    let result = await reqDeleteCart(skuId);\n    if (result.code == 200) {\n      return 'ok';\n    } else {\n      return Promise.reject();\n    }\n  },\n  //修改某一个商品勾选状态\n  async changeChecked({\n    commit,\n    state,\n    dispatch\n  }, {\n    skuId,\n    isChecked\n  }) {\n    let result = await reqUpdateChecked(skuId, isChecked);\n    if (result.code == 200) {\n      return 'ok';\n    } else {\n      return Promise.reject();\n    }\n  },\n  //修改全部商品的勾选的状态\n  allUpdateChecked({\n    commit,\n    state,\n    dispatch\n  }, isChecked) {\n    let arr = [];\n    //获取购物车商品的个数,进行遍历\n    state.shopCartInfo[0].cartInfoList.forEach(item => {\n      //调用修改某一个商品的action【四次】\n      let ps = dispatch(\"changeChecked\", {\n        skuId: item.skuId,\n        isChecked\n      });\n      arr.push(ps);\n    });\n    //Promise.all():参数需要的是一个数组【数组里面需要promise】\n    //Promise.all()执行一次,返回的是一个Promise对象,Promise对象状态：成功、失败取决于什么?\n    //成功、还是失败取决于数组里面的promise状态:四个都成功、返回成功Promise、只要有一个失败、返回Promise失败状态！！！\n    return Promise.all(arr);\n  },\n  //删除选中的商品\n  deleteAllCart({\n    commit,\n    state,\n    dispatch\n  }) {\n    let arr = [];\n    //获取仓库里面购物车的数据\n    state.shopCartInfo[0].cartInfoList.forEach(item => {\n      //商品的勾选状态是勾选的,发请求一个一个删除\n      if (item.isChecked == 1) {\n        let ps = dispatch('deleteCartById', item.skuId);\n        arr.push(ps);\n      }\n    });\n    return Promise.all(arr);\n  }\n};\nlet getters = {\n  //计算数组里面第一个元素：对象\n  CartInfo(state) {\n    return state.shopCartInfo[0] || {};\n  }\n};\n\n//对外暴露\nexport default {\n  state,\n  mutations,\n  actions,\n  getters\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}