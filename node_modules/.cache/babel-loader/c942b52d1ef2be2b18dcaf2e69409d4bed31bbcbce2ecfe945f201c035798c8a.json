{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  //给组件起一个名字,开发者工具中显示这个组件的时候，显示的就是这个名字\n  name: \"Header\",\n  data() {\n    return {\n      keyword: \"\"\n    };\n  },\n  methods: {\n    //搜索按钮的回调\n    goSearch() {\n      let locations = {\n        name: \"search\",\n        params: {\n          keyword: this.keyword || undefined\n        }\n      };\n      //确定路径当中有query参数\n      if (this.$route.query.categoryName) {\n        locations.query = this.$route.query;\n        console.log(locations);\n      }\n      this.$router.push(locations);\n    },\n    logout() {\n      //派遣action退出登录\n      this.$store.dispatch(\"logout\");\n    }\n    // this.$router.push({path:'/search',query:{keyword:'123'}});\n    // this.$router.push('/search/dada');\n  },\n\n  //路由的跳转,采用的是编程式导航.\n  //路由传递参数\n\n  //第一种传递query参数\n  // this.$router.push({path:'/search',query:{keyword:this.keyword}});\n\n  //第二种传递params参数 [一定要注意,面试的时候经常问]\n  // this.$router.push({name:'search',params:{keyword:this.keyword}})\n\n  //第三种传递query+params\n  // this.$router.push({\n  //   name: \"search\",\n  //   params: { keyword: this.keyword },\n  //   query: { keyword: \"ABC\" },\n  // });\n\n  //验证Vue-Router引入Promise技术,最笨的方法,给push传递第二个、第三个参数【回调函数】\n  //下面这种写法：治标不治本！！！！\n  // let result = this.$router.push({name: \"search\",params: { keyword: this.keyword|| undefined}},()=>{},()=>{});\n\n  //问题1:push方法,里面this是谁? vueRouter类的实例\n  // this.$router.push({name:'search',params:{keyword:this.keyword}});\n  //问题2:push方法里面的this是谁?windows\n  // let result = this.$router.push;\n  // result({name:'search',params:{keyword:this.keyword}})\n\n  //点击搜索按钮之前,如果路径当中有query参数,需要携带给search\n\n  // //退出登录的按钮的回调\n\n  mounted() {\n    //清除关键字\n    this.$bus.$on(\"clearKeyword\", () => {\n      console.log(123);\n      this.keyword = \"\";\n    });\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}