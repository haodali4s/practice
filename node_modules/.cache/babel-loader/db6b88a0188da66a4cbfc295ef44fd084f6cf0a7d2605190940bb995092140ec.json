{"ast":null,"code":"//对于axios进行二次封装\nimport axios from \"axios\";\n//获取仓库:存储数据\n// import store from \"@/store\";\n// //引入进度条\n// import nprogress from 'nprogress';\n// //引入相关进度条的样式\n// import \"nprogress/nprogress.css\";\n\n//axios.create方法执行,其实返回一个axios和request一样的\nlet requests = axios.create({\n  //基础路径,发请求URL携带api【发现:真实服务器接口都携带/api】\n  baseURL: \"/api\",\n  //超时的设置\n  timeout: 5000\n});\n\n//请求拦截器:将来项目中【N个请求】，只要发请求,会触发请求拦截器!!!\n// requests.interceptors.request.use(config => {\n//     //请求拦截器:请求头【header】,请求头能否给服务器携带参数\n//     //请求拦截器：其实项目中还有一个重要的作用,给服务器携带请求们的公共的参数\n//     //进度条开始\n//     nprogress.start();\n\n//     if (store.state.shopcart.USER_ID) {\n//         config.headers.userTempId = store.state.shopcart.USER_ID;\n//     }\n\n//     //token[公共参数]\n\n//     if(store.state.user.token){\n//         config.headers.token = store.state.user.token;\n//     }\n\n//     //每一次发请求,请求头携带用户临时身份\n//     // config.headers.userTempId = SET_USERID();\n//     //不管那个模块发请求,请求拦截器，都可以触发。请求拦截器可以通过请求头每一次协大公共参数给服务器【用户未登录的临时身份】\n//     return config;\n// });\n\n//响应拦截器：请求数据返回会执行\n// requests.interceptors.response.use((res) => {\n//     //res:实质就是项目中发请求、服务器返回的数据\n//     //进度条结束\n//     nprogress.done();\n//     return res.data;\n// }, (err) => {\n//     //温馨提示:某一天发请求,请求失败,请求失败的信息打印出来\n//     alert(err.message);\n//     //终止Promise链\n//     return new Promise();\n// });\n\n//最后需要暴露:暴露的是添加新的功能的axios,即为requests\nexport default requests;","map":{"version":3,"names":["axios","requests","create","baseURL","timeout"],"sources":["C:/Users/Admin/Desktop/qian/cil/shangpinhui/src/api/requests.js"],"sourcesContent":["//对于axios进行二次封装\r\nimport axios from \"axios\";\r\n//获取仓库:存储数据\r\n// import store from \"@/store\";\r\n// //引入进度条\r\n// import nprogress from 'nprogress';\r\n// //引入相关进度条的样式\r\n// import \"nprogress/nprogress.css\";\r\n\r\n//axios.create方法执行,其实返回一个axios和request一样的\r\nlet requests = axios.create({\r\n    //基础路径,发请求URL携带api【发现:真实服务器接口都携带/api】\r\n    baseURL: \"/api\",\r\n    //超时的设置\r\n    timeout: 5000\r\n});\r\n\r\n//请求拦截器:将来项目中【N个请求】，只要发请求,会触发请求拦截器!!!\r\n// requests.interceptors.request.use(config => {\r\n//     //请求拦截器:请求头【header】,请求头能否给服务器携带参数\r\n//     //请求拦截器：其实项目中还有一个重要的作用,给服务器携带请求们的公共的参数\r\n//     //进度条开始\r\n//     nprogress.start();\r\n\r\n//     if (store.state.shopcart.USER_ID) {\r\n//         config.headers.userTempId = store.state.shopcart.USER_ID;\r\n//     }\r\n\r\n//     //token[公共参数]\r\n\r\n//     if(store.state.user.token){\r\n//         config.headers.token = store.state.user.token;\r\n//     }\r\n\r\n//     //每一次发请求,请求头携带用户临时身份\r\n//     // config.headers.userTempId = SET_USERID();\r\n//     //不管那个模块发请求,请求拦截器，都可以触发。请求拦截器可以通过请求头每一次协大公共参数给服务器【用户未登录的临时身份】\r\n//     return config;\r\n// });\r\n\r\n\r\n//响应拦截器：请求数据返回会执行\r\n// requests.interceptors.response.use((res) => {\r\n//     //res:实质就是项目中发请求、服务器返回的数据\r\n//     //进度条结束\r\n//     nprogress.done();\r\n//     return res.data;\r\n// }, (err) => {\r\n//     //温馨提示:某一天发请求,请求失败,请求失败的信息打印出来\r\n//     alert(err.message);\r\n//     //终止Promise链\r\n//     return new Promise();\r\n// });\r\n\r\n//最后需要暴露:暴露的是添加新的功能的axios,即为requests\r\nexport default requests;\r\n\r\n\r\n\r\n\r\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,IAAIC,QAAQ,GAAGD,KAAK,CAACE,MAAM,CAAC;EACxB;EACAC,OAAO,EAAE,MAAM;EACf;EACAC,OAAO,EAAE;AACb,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAeH,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}